import base64
import os
import schedule
import time
from pyrogram import Client
from decouple import config
from sqlalchemy import text, select, and_

from utils.connection_db import connection_db
from utils.data_state import DataFailedMessage
from domain.sources.dal import SourecDAL

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –º–µ–¥–∏–∞, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
MEDIA_FOLDER = os.path.join('downloads', 'media')
if not os.path.exists(MEDIA_FOLDER):
    os.makedirs(MEDIA_FOLDER, exist_ok=True)

# –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é –∫–ª–∏–µ–Ω—Ç–∞
api_id = config('API_ID')
api_hash = config('API_HASH')
phone = config('PHONE')
login = config('LOGIN')

app = Client(name=login, api_id=api_id, api_hash=api_hash, phone_number=phone)


def download_avatar_to_base64(app, tg_channel_name):
    chat = app.get_chat(tg_channel_name)

    if chat.photo:
        # –®–∞–≥ 1: –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞ –¥–∏—Å–∫
        file_path = app.download_media(chat.photo.big_file_id, file_name="temp_avatar.jpg")

        # –®–∞–≥ 2: –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –∫–æ–¥–∏—Ä—É–µ–º –≤ base64
        with open(file_path, "rb") as f:
            base64_str = base64.b64encode(f.read()).decode("utf-8")

        # –®–∞–≥ 3: –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(file_path)
        # print(f'{base64_str[:20]=}', chat.title if chat.title else None)
        return base64_str, chat.title if chat.title else None
    else:
        print("‚ùå –£ —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ.")
        return None, chat.title if chat.title else None


# download_avatar_to_base64()


def get_text_media(limit=10, channel_id=1):
    Session = connection_db()
    if Session is None:
        return DataFailedMessage(error_message='–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!')

    with Session() as session:
        if session is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ë–î")
            return

        with app:  # ‚úÖ –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            sources = SourecDAL.get_sources_by_channel_id(channel_id)
            result = []
            try:
                for src in sources:
                    tg_channel_name = src['name']
                    new_post = {tg_channel_name: []}
                    print(f"üì° –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞: {tg_channel_name}")

                    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –∫–∞–Ω–∞–ª–∞
                    tg_channel_avatar, tg_channel_title = download_avatar_to_base64(app, tg_channel_name)

                    query_for_avatar = SourecDAL.get_source_by_source_name(tg_channel_name)

                    if query_for_avatar and tg_channel_avatar and (
                            query_for_avatar.source_photo is None or query_for_avatar.source_photo != tg_channel_avatar):
                        query_for_avatar.source_photo = tg_channel_avatar
                        session.add(query_for_avatar)
                        session.commit()

                    if query_for_avatar and tg_channel_title and (
                            query_for_avatar.source_title is None or query_for_avatar.source_title != tg_channel_title):
                        query_for_avatar.source_title = tg_channel_title
                        session.add(query_for_avatar)
                        session.commit()

                    messages = list(app.get_chat_history(tg_channel_name, limit=limit))

                    last_saved_news: LastNews = session.execute(
                        select(LastNews).filter(LastNews.source_id == src['id']).order_by(LastNews.message_id.desc())
                    ).scalars().first()

                    last_message_id = last_saved_news.message_id if last_saved_news else 0
                    print(f"üßæ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π message_id: {last_message_id}")

                    newest_message = None

                    for message in reversed(messages):
                        temp_post_photo_base64_str = None
                        if not message.text:
                            continue
                        if int(message.id) <= int(last_message_id):
                            continue

                        if message.photo:
                            file_path = app.download_media(message.photo.file_id, file_name="temp_post_photo.jpg")
                            with open(file_path, "rb") as f:
                                temp_post_photo_base64_str = base64.b64encode(f.read()).decode("utf-8")
                            os.remove(file_path)

                        new_post[tg_channel_name].append({
                            'message_id': message.id,
                            'message_date': message.date,
                            'message_text': message.text,
                            'message_photo': temp_post_photo_base64_str[:20] if temp_post_photo_base64_str else None
                        })

                        newest_message = message

                    if newest_message:
                        new_news = LastNews(
                            message_id=newest_message.id,
                            source_id=src['id'],
                            description=newest_message.text,
                            pub_date=newest_message.date,
                            title=newest_message.text,
                            photo=temp_post_photo_base64_str
                        )
                        session.add(new_news)
                        session.commit()
                        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {newest_message.id}")
                    else:
                        print("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
                    result.append(new_post)

                return result

            except Exception as e:
                session.rollback()
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:", e)
            finally:
                session.close()

#
# # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
schedule.every(1).minutes.do(get_text_media)

print("‚è≥ –°–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω. –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞.")

# –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞
while True:
    schedule.run_pending()
    time.sleep(1)
